# Docker Volumes:
Theory:
  Docker volumes are a way to persist data generated and used by Docker containers. When a container is deleted, 
  all the changes made inside the container are lost. Docker volumes provide a mechanism to store data outside 
  the container, ensuring data persistence even when the container is deleted.

Types of Docker Volumes:

Anonymous Volumes: Created automatically when you mount a volume without specifying a name.
Named Volumes: Explicitly created and managed by the user.
Host Volumes (Bind Mounts): Map a directory on the Docker host to a directory in the container.

Use Cases:

Data Persistence: Store database files or application data.
Sharing Data Between Containers: Multiple containers can share data using the same volume.
Backup and Restore: Easily backup and restore data stored in volumes.


Creating and Using a Named Volume:

# Create a named volume
  docker volume create my_volume

# Run a container using the volume
  docker run -d --name my_container -v my_volume:/data nginx

# Verify the volume is used
  docker exec my_container ls /data

Anonymous Volumes:

# Run a container with an anonymous volume
  docker run -d --name my_anonymous_container -v /data nginx

# Verify the volume is used
  docker inspect my_anonymous_container | grep Mounts -A 10

Host Volumes:

# Run a container with a host volume
  docker run -d --name my_host_container -v /path/on/host:/data nginx

# Verify the data is persisted on the host
  ls /path/on/host

# Docker Networking: 
Theory:
  Docker networking allows containers to communicate with each other, the Docker host, and external networks. 
  Docker provides several networking drivers to handle container communication.

# Types of Docker Networks:

Bridge Network (default): Isolated network for containers on the same host. Containers can communicate with each
 other using container names.
Host Network: Shares the host's network namespace. Containers use the host's IP address.
Overlay Network: Allows containers on different hosts to communicate in a swarm cluster.
Macvlan Network: Assigns a MAC address to each container, making them appear as physical devices on the network.
None: Containers have no network access.

# Use Cases:

Bridge Network: Isolate microservices in a local environment.
Host Network: When performance is critical and network overhead needs to be minimized.
Overlay Network: Connecting services in a Docker Swarm.
Macvlan Network: Integrating Docker containers into existing physical networks.

Bridge Network:

# Create a custom bridge network
  docker network create my_bridge_network

# Run containers in the bridge network
  docker run -d --name container1 --network my_bridge_network nginx
  docker run -d --name container2 --network my_bridge_network nginx

# Test communication between containers
  docker exec container1 ping -c 2 container2

Host Network:

# Run a container using the host network
  docker run -d --name my_host_network_container --network host nginx

# Access the container using the host IP
  curl http://localhost

Overlay Network (requires Docker Swarm):

# Initialize a swarm (if not already initialized)
  docker swarm init

# Create an overlay network
  docker network create -d overlay my_overlay_network

# Deploy services to the overlay network
  docker service create --name web --network my_overlay_network nginx

Macvlan Network:

# Create a macvlan network
  docker network create -d macvlan --subnet=192.168.1.0/24 --gateway=192.168.1.1 -o parent=eth0 my_macvlan_network

# Run a container in the macvlan network
  docker run -d --name my_macvlan_container --network my_macvlan_network nginx

# Check the container's IP address
  docker inspect my_macvlan_container | grep IPAddress